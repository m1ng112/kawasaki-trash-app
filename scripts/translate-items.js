const fs = require('fs');
const path = require('path');

// Translation mappings for common waste items
const translations = {
  // Common items
  'Áîü„Åî„Åø': {
    en: 'Food Waste',
    zh: 'Âé®‰ΩôÂûÉÂúæ',
    ko: 'ÏùåÏãùÎ¨ºÏì∞Î†àÍ∏∞'
  },
  '„Éö„ÉÉ„Éà„Éú„Éà„É´': {
    en: 'PET Bottle',
    zh: 'PETÁì∂',
    ko: 'PETÎ≥ë'
  },
  'Áº∂': {
    en: 'Can',
    zh: 'ÁΩêÂ§¥',
    ko: 'Ï∫î'
  },
  'Êñ∞ËÅû': {
    en: 'Newspaper',
    zh: 'Êä•Á∫∏',
    ko: 'Ïã†Î¨∏'
  },
  'Êñ∞ËÅûÁ¥ô': {
    en: 'Newspaper',
    zh: 'Êä•Á∫∏',
    ko: 'Ïã†Î¨∏ÏßÄ'
  },
  'ÈõëË™å': {
    en: 'Magazine',
    zh: 'ÊùÇÂøó',
    ko: 'Ïû°ÏßÄ'
  },
  'Êú¨': {
    en: 'Book',
    zh: '‰π¶Á±ç',
    ko: 'Ï±Ö'
  },
  'Êõ∏Á±ç': {
    en: 'Books',
    zh: '‰π¶Á±ç',
    ko: 'ÏÑúÏ†Å'
  },
  'ÊÆµ„Éú„Éº„É´': {
    en: 'Cardboard',
    zh: 'Á∫∏ÁÆ±',
    ko: 'Í≥®ÌåêÏßÄ'
  },
  '„Éó„É©„Çπ„ÉÅ„ÉÉ„ÇØ': {
    en: 'Plastic',
    zh: 'Â°ëÊñô',
    ko: 'ÌîåÎùºÏä§Ìã±'
  },
  'ÈõªÊ±†': {
    en: 'Battery',
    zh: 'ÁîµÊ±†',
    ko: 'Î∞∞ÌÑ∞Î¶¨'
  },
  'ÂÆ∂ÂÖ∑': {
    en: 'Furniture',
    zh: 'ÂÆ∂ÂÖ∑',
    ko: 'Í∞ÄÍµ¨'
  },
  '„ÉÅ„É©„Ç∑': {
    en: 'Flyer',
    zh: '‰º†Âçï',
    ko: 'Ï†ÑÎã®ÏßÄ'
  },
  'ÂåÖË£ÖÁ¥ô': {
    en: 'Wrapping Paper',
    zh: 'ÂåÖË£ÖÁ∫∏',
    ko: 'Ìè¨Ïû•ÏßÄ'
  },
  'Â∞ÅÁ≠í': {
    en: 'Envelope',
    zh: '‰ø°Â∞Å',
    ko: 'Î¥âÌà¨'
  },
  'ÊâãÁ¥ô': {
    en: 'Letter',
    zh: '‰ø°‰ª∂',
    ko: 'Ìé∏ÏßÄ'
  },
  'Á¥ôË¢ã': {
    en: 'Paper Bag',
    zh: 'Á∫∏Ë¢ã',
    ko: 'Ï¢ÖÏù¥Î¥âÌà¨'
  },
  '„Ç¢„É´„Éü': {
    en: 'Aluminum',
    zh: 'Èìù',
    ko: 'ÏïåÎ£®ÎØ∏ÎäÑ'
  },
  '„Ç¢„É´„ÉüÁº∂': {
    en: 'Aluminum Can',
    zh: 'ÈìùÁΩê',
    ko: 'ÏïåÎ£®ÎØ∏ÎäÑÏ∫î'
  },
  '„Ç¨„É©„Çπ': {
    en: 'Glass',
    zh: 'ÁéªÁíÉ',
    ko: 'Ïú†Î¶¨'
  },
  '„Å≥„Çì': {
    en: 'Bottle',
    zh: 'Áì∂Â≠ê',
    ko: 'Î≥ë'
  },
  'Áì∂': {
    en: 'Bottle',
    zh: 'Áì∂Â≠ê',
    ko: 'Î≥ë'
  },
  'Á¥ô„Åä„ÇÄ„Å§': {
    en: 'Diaper',
    zh: 'Á∫∏Â∞øË£§',
    ko: 'Í∏∞Ï†ÄÍ∑Ä'
  },
  '„Åä„ÇÄ„Å§': {
    en: 'Diaper',
    zh: 'Á∫∏Â∞øË£§',
    ko: 'Í∏∞Ï†ÄÍ∑Ä'
  },
  'Êê∫Â∏ØÈõªË©±': {
    en: 'Mobile Phone',
    zh: 'ÊâãÊú∫',
    ko: 'Ìú¥ÎåÄÌè∞'
  },
  '„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥': {
    en: 'Smartphone',
    zh: 'Êô∫ËÉΩÊâãÊú∫',
    ko: 'Ïä§ÎßàÌä∏Ìè∞'
  },
  '„ÉÜ„É¨„Éì': {
    en: 'Television',
    zh: 'ÁîµËßÜ',
    ko: 'ÌÖîÎ†àÎπÑÏ†Ñ'
  },
  'ÂÜ∑ËîµÂ∫´': {
    en: 'Refrigerator',
    zh: 'ÂÜ∞ÁÆ±',
    ko: 'ÎÉâÏû•Í≥†'
  },
  'Ê¥óÊøØÊ©ü': {
    en: 'Washing Machine',
    zh: 'Ê¥óË°£Êú∫',
    ko: 'ÏÑ∏ÌÉÅÍ∏∞'
  },
  '„Ç®„Ç¢„Ç≥„É≥': {
    en: 'Air Conditioner',
    zh: 'Á©∫Ë∞É',
    ko: 'ÏóêÏñ¥Ïª®'
  }
};

// Category translations
const categoryInstructions = {
  burnable: {
    ja: 'ÁáÉ„ÇÑ„Åô„Åî„Åø„Å®„Åó„Å¶Âá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    en: 'Dispose as burnable waste.',
    zh: 'ËØ∑‰Ωú‰∏∫ÂèØÁáÉÂûÉÂúæÂ§ÑÁêÜ„ÄÇ',
    ko: 'ÌÉÄÎäîÏì∞Î†àÍ∏∞Î°ú Î≤ÑÎ†§Ï£ºÏÑ∏Ïöî.'
  },
  recyclable: {
    ja: '„É™„Çµ„Ç§„ÇØ„É´ÂèØËÉΩ„Å™Ë≥áÊ∫ê„Å®„Åó„Å¶Âá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    en: 'Dispose as recyclable resource.',
    zh: 'ËØ∑‰Ωú‰∏∫ÂèØÂõûÊî∂ËµÑÊ∫êÂ§ÑÁêÜ„ÄÇ',
    ko: 'Ïû¨ÌôúÏö© ÏûêÏõêÏúºÎ°ú Î≤ÑÎ†§Ï£ºÏÑ∏Ïöî.'
  },
  nonBurnable: {
    ja: 'ÁáÉ„ÇÑ„Åï„Å™„ÅÑ„Åî„Åø„Å®„Åó„Å¶Âá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    en: 'Dispose as non-burnable waste.',
    zh: 'ËØ∑‰Ωú‰∏∫‰∏çÂèØÁáÉÂûÉÂúæÂ§ÑÁêÜ„ÄÇ',
    ko: 'ÏïàÌÉÄÎäîÏì∞Î†àÍ∏∞Î°ú Î≤ÑÎ†§Ï£ºÏÑ∏Ïöî.'
  },
  oversized: {
    ja: 'Á≤óÂ§ß„Åî„Åø„Å®„Åó„Å¶Áî≥„ÅóËæº„Åø„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ',
    en: 'Application required for oversized waste.',
    zh: 'ÈúÄË¶ÅÁî≥ËØ∑Â§ßÂûãÂûÉÂúæÂ§ÑÁêÜ„ÄÇ',
    ko: 'ÎåÄÌòïÌèêÍ∏∞Î¨ºÎ°ú Ïã†Ï≤≠Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.'
  }
};

// Function to translate item name using pattern matching
function translateItemName(japaneseName, targetLang) {
  // Direct translation lookup
  if (translations[japaneseName] && translations[japaneseName][targetLang]) {
    return translations[japaneseName][targetLang];
  }
  
  // Pattern-based translations for compound items
  let translatedName = japaneseName;
  
  // Replace known components
  for (const [jpTerm, translations_obj] of Object.entries(translations)) {
    if (japaneseName.includes(jpTerm) && translations_obj[targetLang]) {
      translatedName = translatedName.replace(jpTerm, translations_obj[targetLang]);
    }
  }
  
  // If no translation found, return original for now
  // In a real implementation, you'd use a translation API
  return translatedName === japaneseName ? japaneseName : translatedName;
}

// Function to translate keywords
function translateKeywords(japaneseKeywords, targetLang) {
  const translatedKeywords = [];
  
  japaneseKeywords.forEach(keyword => {
    const translated = translateItemName(keyword, targetLang);
    translatedKeywords.push(translated);
    
    // Also add variations if different
    if (translated !== keyword) {
      translatedKeywords.push(keyword); // Keep original as fallback
    }
  });
  
  // Add some common search terms for each language
  if (targetLang === 'ko') {
    // Add common Korean waste terms
    const commonKoreanTerms = ['Ïì∞Î†àÍ∏∞', 'ÌèêÍ∏∞Î¨º', 'Ïû¨ÌôúÏö©', 'Î∂ÑÎ¶¨ÏàòÍ±∞'];
    translatedKeywords.push(...commonKoreanTerms);
  } else if (targetLang === 'zh') {
    // Add common Chinese waste terms
    const commonChineseTerms = ['ÂûÉÂúæ', 'Â∫üÁâ©', 'ÂõûÊî∂', 'ÂàÜÁ±ª'];
    translatedKeywords.push(...commonChineseTerms);
  } else if (targetLang === 'en') {
    // Add common English waste terms
    const commonEnglishTerms = ['waste', 'garbage', 'trash', 'recycling'];
    translatedKeywords.push(...commonEnglishTerms);
  }
  
  return [...new Set(translatedKeywords)]; // Remove duplicates
}

// Function to translate instructions
function translateInstructions(japaneseInstructions, category, targetLang) {
  // Use category-based default instructions
  const defaultInstruction = categoryInstructions[category][targetLang];
  
  // For now, return the default instruction
  // In a real implementation, you'd translate the specific instructions
  return defaultInstruction;
}

// Update the wasteItems.ts file with translations
function addTranslationsToWasteItems() {
  const wasteItemsPath = path.join(__dirname, '..', 'data', 'wasteItems.ts');
  const wasteItemsContent = fs.readFileSync(wasteItemsPath, 'utf-8');
  
  // Extract the wasteItemsData array using regex
  const dataMatch = wasteItemsContent.match(/const wasteItemsData: WasteItemData\[\] = (\[[\s\S]*?\]);/);
  if (!dataMatch) {
    throw new Error('Could not find wasteItemsData in file');
  }
  
  const wasteItemsData = JSON.parse(dataMatch[1]);
  
  console.log(`Processing ${wasteItemsData.length} items for translation...`);
  
  // Update each item with translations
  wasteItemsData.forEach((item, index) => {
    const japaneseName = item.names.ja;
    const japaneseKeywords = item.keywords.ja;
    const japaneseInstructions = item.instructions.ja;
    
    // Translate names
    item.names.en = translateItemName(japaneseName, 'en');
    item.names.zh = translateItemName(japaneseName, 'zh');
    item.names.ko = translateItemName(japaneseName, 'ko');
    
    // Translate keywords
    item.keywords.en = translateKeywords(japaneseKeywords, 'en');
    item.keywords.zh = translateKeywords(japaneseKeywords, 'zh');
    item.keywords.ko = translateKeywords(japaneseKeywords, 'ko');
    
    // Translate instructions
    item.instructions.en = translateInstructions(japaneseInstructions, item.category, 'en');
    item.instructions.zh = translateInstructions(japaneseInstructions, item.category, 'zh');
    item.instructions.ko = translateInstructions(japaneseInstructions, item.category, 'ko');
    
    if ((index + 1) % 500 === 0) {
      console.log(`Processed ${index + 1} items...`);
    }
  });
  
  // Replace the data in the original content
  const updatedContent = wasteItemsContent.replace(
    /const wasteItemsData: WasteItemData\[\] = \[[\s\S]*?\];/,
    `const wasteItemsData: WasteItemData[] = ${JSON.stringify(wasteItemsData, null, 2)};`
  );
  
  // Write back to file
  fs.writeFileSync(wasteItemsPath, updatedContent);
  
  console.log('‚úÖ Successfully added translations to wasteItems.ts');
  
  // Show some translation examples
  console.log('\nüìù Translation examples:');
  const examples = wasteItemsData.slice(0, 5);
  examples.forEach(item => {
    console.log(`Japanese: ${item.names.ja}`);
    console.log(`Korean: ${item.names.ko}`);
    console.log(`Chinese: ${item.names.zh}`);
    console.log(`English: ${item.names.en}`);
    console.log('---');
  });
}

// Run the translation
if (require.main === module) {
  try {
    addTranslationsToWasteItems();
  } catch (error) {
    console.error('‚ùå Error adding translations:', error);
    process.exit(1);
  }
}

module.exports = { addTranslationsToWasteItems };